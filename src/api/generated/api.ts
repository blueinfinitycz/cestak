/* tslint:disable */
/* eslint-disable */
/**
 * Kniha j√≠zd - OpenAPI 3.0
 * Internal system for travel order, log book
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: robertchytil@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ApiResponse
 */
export interface ApiResponse {
    /**
     * 
     * @type {string}
     * @memberof ApiResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface Car
 */
export interface Car {
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'owner'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'responsiblePerson'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'vehicleBrand'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'spz'?: string;
    /**
     * 
     * @type {TypeOfPhm}
     * @memberof Car
     */
    'typeOfPhm'?: TypeOfPhm;
    /**
     * 
     * @type {number}
     * @memberof Car
     */
    'speedometerCurrentState'?: number;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'vinCode'?: string;
    /**
     * 
     * @type {CategoryOfVehicle}
     * @memberof Car
     */
    'category'?: CategoryOfVehicle;
    /**
     * 
     * @type {number}
     * @memberof Car
     */
    'yearOfManufacture'?: number;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'technicalLicenseNumber'?: string;
    /**
     * 
     * @type {number}
     * @memberof Car
     */
    'engineCapacity'?: number;
    /**
     * 
     * @type {number}
     * @memberof Car
     */
    'tankVolume'?: number;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'companyCenter'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'averageConsumption'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'validityOfRoadStamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'appointmentOfServiceVisits'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'termStk'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'serviceAccordingToKm'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'serviceAccordingToMonth'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'dateOfAcquisition'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'dateOfWithdrawal'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'speedometerAtTheTimeOfPurchase'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'insurance'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'greenCardNumber'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'leasingCompany'?: string;
    /**
     * 
     * @type {string}
     * @memberof Car
     */
    'creditCard'?: string;
}
/**
 * 
 * @export
 * @interface CategoryOfVehicle
 */
export interface CategoryOfVehicle {
    /**
     * 
     * @type {number}
     * @memberof CategoryOfVehicle
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryOfVehicle
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GetCarsApiResponse
 */
export interface GetCarsApiResponse {
    /**
     * 
     * @type {Array<GetCarsApiResponseCars>}
     * @memberof GetCarsApiResponse
     */
    'cars'?: Array<GetCarsApiResponseCars>;
}
/**
 * 
 * @export
 * @interface GetCarsApiResponseCars
 */
export interface GetCarsApiResponseCars {
    /**
     * 
     * @type {string}
     * @memberof GetCarsApiResponseCars
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCarsApiResponseCars
     */
    'spz'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCarsApiResponseCars
     */
    'carBrand'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCarsApiResponseCars
     */
    'responsiblePerson'?: string;
    /**
     * 
     * @type {string}
     * @memberof GetCarsApiResponseCars
     */
    'notes'?: string;
}
/**
 * 
 * @export
 * @interface LogBookApiResponse
 */
export interface LogBookApiResponse {
    /**
     * 
     * @type {Car}
     * @memberof LogBookApiResponse
     */
    'carInfo'?: Car;
    /**
     * 
     * @type {Array<Record>}
     * @memberof LogBookApiResponse
     */
    'logBook'?: Array<Record>;
}
/**
 * 
 * @export
 * @interface LoginApiResponse
 */
export interface LoginApiResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginApiResponse
     */
    'role'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginApiResponse
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginApiResponse
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginApiResponse
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginApiResponse
     */
    'access_token'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginApiResponse
     */
    'refresh_token'?: string;
}
/**
 * 
 * @export
 * @interface MethodOfPayment
 */
export interface MethodOfPayment {
    /**
     * 
     * @type {number}
     * @memberof MethodOfPayment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof MethodOfPayment
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'journeyFrom'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'journeyVia'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'journeyTo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'departure'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'arrival'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'speedometer'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'fuel'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'cost'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'diets'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'overnight'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'methodOfPayment'?: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    'signature'?: string;
}
/**
 * 
 * @export
 * @interface TypeOfPhm
 */
export interface TypeOfPhm {
    /**
     * 
     * @type {number}
     * @memberof TypeOfPhm
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TypeOfPhm
     */
    'name'?: string;
}

/**
 * CreateRecordApi - axios parameter creator
 * @export
 */
export const CreateRecordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {string} [date] 
         * @param {string} [journeyFrom] 
         * @param {string} [journeyVia] 
         * @param {string} [journeyTo] 
         * @param {string} [departure] 
         * @param {string} [arrival] 
         * @param {string} [speedometer] 
         * @param {string} [fuel] 
         * @param {string} [cost] 
         * @param {string} [diets] 
         * @param {string} [overnight] 
         * @param {string} [methodOfPayment] 
         * @param {string} [signature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordPost: async (id?: string, date?: string, journeyFrom?: string, journeyVia?: string, journeyTo?: string, departure?: string, arrival?: string, speedometer?: string, fuel?: string, cost?: string, diets?: string, overnight?: string, methodOfPayment?: string, signature?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (id !== undefined) { 
                localVarFormParams.set('id', id as any);
            }
    
            if (date !== undefined) { 
                localVarFormParams.set('date', date as any);
            }
    
            if (journeyFrom !== undefined) { 
                localVarFormParams.set('journeyFrom', journeyFrom as any);
            }
    
            if (journeyVia !== undefined) { 
                localVarFormParams.set('journeyVia', journeyVia as any);
            }
    
            if (journeyTo !== undefined) { 
                localVarFormParams.set('journeyTo', journeyTo as any);
            }
    
            if (departure !== undefined) { 
                localVarFormParams.set('departure', departure as any);
            }
    
            if (arrival !== undefined) { 
                localVarFormParams.set('arrival', arrival as any);
            }
    
            if (speedometer !== undefined) { 
                localVarFormParams.set('speedometer', speedometer as any);
            }
    
            if (fuel !== undefined) { 
                localVarFormParams.set('fuel', fuel as any);
            }
    
            if (cost !== undefined) { 
                localVarFormParams.set('cost', cost as any);
            }
    
            if (diets !== undefined) { 
                localVarFormParams.set('diets', diets as any);
            }
    
            if (overnight !== undefined) { 
                localVarFormParams.set('overnight', overnight as any);
            }
    
            if (methodOfPayment !== undefined) { 
                localVarFormParams.set('methodOfPayment', methodOfPayment as any);
            }
    
            if (signature !== undefined) { 
                localVarFormParams.set('signature', signature as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreateRecordApi - functional programming interface
 * @export
 */
export const CreateRecordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreateRecordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {string} [date] 
         * @param {string} [journeyFrom] 
         * @param {string} [journeyVia] 
         * @param {string} [journeyTo] 
         * @param {string} [departure] 
         * @param {string} [arrival] 
         * @param {string} [speedometer] 
         * @param {string} [fuel] 
         * @param {string} [cost] 
         * @param {string} [diets] 
         * @param {string} [overnight] 
         * @param {string} [methodOfPayment] 
         * @param {string} [signature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordPost(id?: string, date?: string, journeyFrom?: string, journeyVia?: string, journeyTo?: string, departure?: string, arrival?: string, speedometer?: string, fuel?: string, cost?: string, diets?: string, overnight?: string, methodOfPayment?: string, signature?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordPost(id, date, journeyFrom, journeyVia, journeyTo, departure, arrival, speedometer, fuel, cost, diets, overnight, methodOfPayment, signature, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreateRecordApi - factory interface
 * @export
 */
export const CreateRecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreateRecordApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [id] 
         * @param {string} [date] 
         * @param {string} [journeyFrom] 
         * @param {string} [journeyVia] 
         * @param {string} [journeyTo] 
         * @param {string} [departure] 
         * @param {string} [arrival] 
         * @param {string} [speedometer] 
         * @param {string} [fuel] 
         * @param {string} [cost] 
         * @param {string} [diets] 
         * @param {string} [overnight] 
         * @param {string} [methodOfPayment] 
         * @param {string} [signature] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordPost(id?: string, date?: string, journeyFrom?: string, journeyVia?: string, journeyTo?: string, departure?: string, arrival?: string, speedometer?: string, fuel?: string, cost?: string, diets?: string, overnight?: string, methodOfPayment?: string, signature?: string, options?: any): AxiosPromise<Record> {
            return localVarFp.recordPost(id, date, journeyFrom, journeyVia, journeyTo, departure, arrival, speedometer, fuel, cost, diets, overnight, methodOfPayment, signature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreateRecordApi - object-oriented interface
 * @export
 * @class CreateRecordApi
 * @extends {BaseAPI}
 */
export class CreateRecordApi extends BaseAPI {
    /**
     * 
     * @param {string} [id] 
     * @param {string} [date] 
     * @param {string} [journeyFrom] 
     * @param {string} [journeyVia] 
     * @param {string} [journeyTo] 
     * @param {string} [departure] 
     * @param {string} [arrival] 
     * @param {string} [speedometer] 
     * @param {string} [fuel] 
     * @param {string} [cost] 
     * @param {string} [diets] 
     * @param {string} [overnight] 
     * @param {string} [methodOfPayment] 
     * @param {string} [signature] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateRecordApi
     */
    public recordPost(id?: string, date?: string, journeyFrom?: string, journeyVia?: string, journeyTo?: string, departure?: string, arrival?: string, speedometer?: string, fuel?: string, cost?: string, diets?: string, overnight?: string, methodOfPayment?: string, signature?: string, options?: AxiosRequestConfig) {
        return CreateRecordApiFp(this.configuration).recordPost(id, date, journeyFrom, journeyVia, journeyTo, departure, arrival, speedometer, fuel, cost, diets, overnight, methodOfPayment, signature, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary updates an existing record based on specific id
         * @param {number} id numeric id required
         * @param {number} id2 
         * @param {string} column 
         * @param {string} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordIdPut: async (id: number, id2: number, column: string, value: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recordIdPut', 'id', id)
            // verify required parameter 'id2' is not null or undefined
            assertParamExists('recordIdPut', 'id2', id2)
            // verify required parameter 'column' is not null or undefined
            assertParamExists('recordIdPut', 'column', column)
            // verify required parameter 'value' is not null or undefined
            assertParamExists('recordIdPut', 'value', value)
            const localVarPath = `/record/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (id2 !== undefined) { 
                localVarFormParams.set('id', id2 as any);
            }
    
            if (column !== undefined) { 
                localVarFormParams.set('column', column as any);
            }
    
            if (value !== undefined) { 
                localVarFormParams.set('value', value as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary updates an existing record based on specific id
         * @param {number} id numeric id required
         * @param {number} id2 
         * @param {string} column 
         * @param {string} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordIdPut(id: number, id2: number, column: string, value: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordIdPut(id, id2, column, value, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary updates an existing record based on specific id
         * @param {number} id numeric id required
         * @param {number} id2 
         * @param {string} column 
         * @param {string} value 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordIdPut(id: number, id2: number, column: string, value: string, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.recordIdPut(id, id2, column, value, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary updates an existing record based on specific id
     * @param {number} id numeric id required
     * @param {number} id2 
     * @param {string} column 
     * @param {string} value 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public recordIdPut(id: number, id2: number, column: string, value: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).recordIdPut(id, id2, column, value, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeleteRecordApi - axios parameter creator
 * @export
 */
export const DeleteRecordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete specific record
         * @param {number} id delete particular record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recordIdDelete', 'id', id)
            const localVarPath = `/record/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeleteRecordApi - functional programming interface
 * @export
 */
export const DeleteRecordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeleteRecordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete specific record
         * @param {number} id delete particular record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeleteRecordApi - factory interface
 * @export
 */
export const DeleteRecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeleteRecordApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete specific record
         * @param {number} id delete particular record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordIdDelete(id: number, options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.recordIdDelete(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeleteRecordApi - object-oriented interface
 * @export
 * @class DeleteRecordApi
 * @extends {BaseAPI}
 */
export class DeleteRecordApi extends BaseAPI {
    /**
     * 
     * @summary Delete specific record
     * @param {number} id delete particular record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeleteRecordApi
     */
    public recordIdDelete(id: number, options?: AxiosRequestConfig) {
        return DeleteRecordApiFp(this.configuration).recordIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GenerateTokenApi - axios parameter creator
 * @export
 */
export const GenerateTokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Generate token
         * @param {object} refreshToken refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenPost: async (refreshToken: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshToken' is not null or undefined
            assertParamExists('tokenPost', 'refreshToken', refreshToken)
            const localVarPath = `/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refreshToken !== undefined) {
                localVarQueryParameter['refreshToken'] = refreshToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenerateTokenApi - functional programming interface
 * @export
 */
export const GenerateTokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GenerateTokenApiAxiosParamCreator(configuration)
    return {
        /**
         * Generate token
         * @param {object} refreshToken refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenPost(refreshToken: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenPost(refreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GenerateTokenApi - factory interface
 * @export
 */
export const GenerateTokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GenerateTokenApiFp(configuration)
    return {
        /**
         * Generate token
         * @param {object} refreshToken refresh token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenPost(refreshToken: object, options?: any): AxiosPromise<void> {
            return localVarFp.tokenPost(refreshToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GenerateTokenApi - object-oriented interface
 * @export
 * @class GenerateTokenApi
 * @extends {BaseAPI}
 */
export class GenerateTokenApi extends BaseAPI {
    /**
     * Generate token
     * @param {object} refreshToken refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenerateTokenApi
     */
    public tokenPost(refreshToken: object, options?: AxiosRequestConfig) {
        return GenerateTokenApiFp(this.configuration).tokenPost(refreshToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GetCarsApi - axios parameter creator
 * @export
 */
export const GetCarsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get basic data about all available cars used in company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/getCars`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetCarsApi - functional programming interface
 * @export
 */
export const GetCarsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetCarsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get basic data about all available cars used in company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCarsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCarsApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCarsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetCarsApi - factory interface
 * @export
 */
export const GetCarsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetCarsApiFp(configuration)
    return {
        /**
         * Get basic data about all available cars used in company
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCarsGet(options?: any): AxiosPromise<GetCarsApiResponse> {
            return localVarFp.getCarsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetCarsApi - object-oriented interface
 * @export
 * @class GetCarsApi
 * @extends {BaseAPI}
 */
export class GetCarsApi extends BaseAPI {
    /**
     * Get basic data about all available cars used in company
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetCarsApi
     */
    public getCarsGet(options?: AxiosRequestConfig) {
        return GetCarsApiFp(this.configuration).getCarsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GetLogBookApi - axios parameter creator
 * @export
 */
export const GetLogBookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get latest logbook according car id
         * @param {number} carId logbook based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carsCarIdGet: async (carId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'carId' is not null or undefined
            
            assertParamExists('carsCarIdGet', 'carId', carId)
            const localVarPath = `/cars/{carId}`
                .replace(`{${"carId"}}`, encodeURIComponent(String(carId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetLogBookApi - functional programming interface
 * @export
 */
export const GetLogBookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetLogBookApiAxiosParamCreator(configuration)
    return {
        /**
         * Get latest logbook according car id
         * @param {number} carId logbook based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async carsCarIdGet(carId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogBookApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.carsCarIdGet(carId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetLogBookApi - factory interface
 * @export
 */
export const GetLogBookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetLogBookApiFp(configuration)
    return {
        /**
         * Get latest logbook according car id
         * @param {number} carId logbook based on id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        carsCarIdGet(carId: number, options?: any): AxiosPromise<LogBookApiResponse> {
            return localVarFp.carsCarIdGet(carId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetLogBookApi - object-oriented interface
 * @export
 * @class GetLogBookApi
 * @extends {BaseAPI}
 */
export class GetLogBookApi extends BaseAPI {
    /**
     * Get latest logbook according car id
     * @param {number} carId logbook based on id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetLogBookApi
     */
    public carsCarIdGet(carId: number, options?: AxiosRequestConfig) {
        return GetLogBookApiFp(this.configuration).carsCarIdGet(carId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GetRecordApi - axios parameter creator
 * @export
 */
export const GetRecordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get particular record of logbook by id
         * @param {number} id record id
         * @param {number} id2 according id get specific record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordIdGet: async (id: number, id2: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('recordIdGet', 'id', id)
            // verify required parameter 'id2' is not null or undefined
            assertParamExists('recordIdGet', 'id2', id2)
            const localVarPath = `/record/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id2 !== undefined) {
                localVarQueryParameter['id'] = id2;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetRecordApi - functional programming interface
 * @export
 */
export const GetRecordApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetRecordApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary get particular record of logbook by id
         * @param {number} id record id
         * @param {number} id2 according id get specific record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordIdGet(id: number, id2: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordIdGet(id, id2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetRecordApi - factory interface
 * @export
 */
export const GetRecordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetRecordApiFp(configuration)
    return {
        /**
         * 
         * @summary get particular record of logbook by id
         * @param {number} id record id
         * @param {number} id2 according id get specific record
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordIdGet(id: number, id2: number, options?: any): AxiosPromise<Record> {
            return localVarFp.recordIdGet(id, id2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetRecordApi - object-oriented interface
 * @export
 * @class GetRecordApi
 * @extends {BaseAPI}
 */
export class GetRecordApi extends BaseAPI {
    /**
     * 
     * @summary get particular record of logbook by id
     * @param {number} id record id
     * @param {number} id2 according id get specific record
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetRecordApi
     */
    public recordIdGet(id: number, id2: number, options?: AxiosRequestConfig) {
        return GetRecordApiFp(this.configuration).recordIdGet(id, id2, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (username?: string, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(username?: string, password?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [username] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(username?: string, password?: string, options?: any): AxiosPromise<LoginApiResponse> {
            return localVarFp.loginPost(username, password, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {string} [username] 
     * @param {string} [password] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginPost(username?: string, password?: string, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).loginPost(username, password, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LogoutApi - axios parameter creator
 * @export
 */
export const LogoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Log out user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogoutApi - functional programming interface
 * @export
 */
export const LogoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogoutApiAxiosParamCreator(configuration)
    return {
        /**
         * Log out user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogoutApi - factory interface
 * @export
 */
export const LogoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogoutApiFp(configuration)
    return {
        /**
         * Log out user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutGet(options?: any): AxiosPromise<ApiResponse> {
            return localVarFp.logoutGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogoutApi - object-oriented interface
 * @export
 * @class LogoutApi
 * @extends {BaseAPI}
 */
export class LogoutApi extends BaseAPI {
    /**
     * Log out user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogoutApi
     */
    public logoutGet(options?: AxiosRequestConfig) {
        return LogoutApiFp(this.configuration).logoutGet(options).then((request) => request(this.axios, this.basePath));
    }
}


